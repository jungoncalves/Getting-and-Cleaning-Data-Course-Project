cbind(mat4, mat5)
rbind(mat4, mat5)
# Desconstruindo a Matriz
c(mat4)
# Lista de strings
lista_caracter1 = list('A', 'B', 'C')
lista_caracter1
lista_caracter2 = list(c("A", "A"), 'B', 'C')
lista_caracter2
lista_caracter3 = list(matrix(c("A", "A", "A", "A"), nr = 2), 'B', 'C')
lista_caracter3
vetor <- c(1:30)
matrix <- matrix(data = 1:8, nrow = 4, ncol = 4)
vetor<- c(1:30)
vetor
matrix<- matrix(data = 1:16, nrow = 4, ncol = 4)
matrix
lista<- list(vetor, matrix)
lista
search()
# Demo
demo("graphics")
x = 5:7
y = 8:10
plot(x,y)
?plot
x = 5:7
y = 8:10
plot(x,y)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
lynx
plot(lynx)
plot(lynx, ylab = "Plots com Dataframes", xlab = "ObservaÃ§Ãµes")
plot(lynx, main = "Plots com Dataframes", col = 'red', col.main = 52, cex.main = 1.5)
plot(lynx, ylab = "Plots com Dataframes", xlab = "ObservaÃ§Ãµes")
# Plot BÃ¡sico
x = 5:7
y = 8:10
plot(x,y)
?plot
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
plot(lynx)
plot(lynx, ylab = "Plots com Dataframes", xlab = "")
plot(lynx, ylab = "Plots com Dataframes", xlab = "ObservaÃ§Ãµes")
plot(lynx, main = "Plots com Dataframes", col = 'red')
plot(lynx, main = "Plots com Dataframes", col = 'red', col.main = 52, cex.main = 1.5)
library(datasets)
hist(warpbreaks$breaks)
library(datasets)
hist(warpbreaks$breaks)
airquality
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
par()
par('pch')
par('lty')
install.packages(c("arules", "arulesSequences", "assertthat", "backports", "BH", "bit", "chron", "clipr", "colorspace", "curl", "dbplyr", "ellipsis", "evaluate", "fansi", "ggplot2", "ggvis", "git2r", "glue", "googleVis", "gtable", "highr", "htmltools", "httpuv", "isoband", "knitr", "later", "lazyeval", "lubridate", "markdown", "mime", "openssl", "pillar", "pkgconfig", "pkgload", "plotrix", "plyr", "prettyunits", "promises", "ps", "R6", "Rcpp", "reshape2", "rmarkdown", "rversions", "scales", "selectr", "shiny", "slam", "stringi", "tibble", "tinytex", "tm", "vctrs", "whisker", "withr", "xfun", "xtable", "yaml"))
cls
install.packages("rmarkdown")
getOption("repos")
install.packages("caTools")
updateR()
installr: install.packages("installr") and library(installr)
install.packages("installr")
library(installr)
updateR()
x <- 1
msg <- 'hello
x <- 1
msg <- 'hello'
x <- 1
msg <- 'hello'
x
x <- 1:20
x
v1 <- c(type = 'numeric', length(10))
v1
v1 <- vector('numeric', length(10))
v1
v1 <- vector('numeric', length = 10)
v1
m <- matrix(nrow = 2, ncol=3)
m
dim(m)
attributes(m)
m <- 1:10
dim(m) <- c(2,5)
m
x <- 1:3
y<-10:12
cbind(x,y)
rbind(x,y)
x <- factor(c('yes','yes','no','yes','no'))
x
table(x)
table(x)
unclass(x)
table(x)
unclass(x)
x <- factor(c('yes','yes','no','yes','no'),
levels = c('yes','no'))
x
x <- 1
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- 1:3
y<-10:12
rbind(x,y)
class(rbind(x,y))
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- 1:4 , y <- 2:3
x <- 1:4
y <- 2:3
x+y
class(x+y)
x <- c(3, 5, 1, 10, 12, 6)
x[x<6]==0
x[x==0]<6
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
for(i in 1:10){
print(i)
}
x<- matrix(1:6,2,3)
for(i in seq_long(nrow(x))){
for(j in seq_along(ncol(x))){
print(x[i,j])
}
}
x<- matrix(1:6,2,3)
for(i in seq_along(nrow(x))){
for(j in seq_along(ncol(x))){
print(x[i,j])
}
}
x<- matrix(1:6,2,3)
for(i in seq_along(nrow(x))){
for(j in seq_along(ncol(x))){
print(x[i,j])
}
}
add2 <- function(x,y){
x+y
}
add2(10,5)
above10<-function(x){
use<- x > 10
x[use]
}
above <- function(x,n){
use <- x>n
x[use]
}
x <- 1:20
above(x,11)
columnmean <- function(y){
ncolumns <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i]<- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y){
ncolumns <- ncol(y)
means <- numeric(ncolumns)
for(i in 1:nc){
means[i]<- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y){
ncolumns <- ncol(y)
means <- numeric(ncolumns)
for(i in 1:ncolumns){
means[i]<- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
ncolumns <- ncol(y)
means <- numeric(ncolumns)
for(i in 1:ncolumns){
means[i]<- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
install.packages("rlist")
library(matlib)
solve(matrix(c(1,0,0,0,1,0,0,0,2)))
solve(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
makeCacheMatrix <- function(x = matrix()) {
if (det(x) != 0){
inverse_matrix  <- inv(x)
}
else{
print("IS NOT SQUARE")
}
return (inverse_matrix)
}
cacheSolve <- function(x, ...) {
x <- solve(x)
inverse_matrix  <- inv(x)
}
cacheSolve <- function(x, ...) {
x <- solve(x)
original_matrix  <- inv(x)
return(original_matrix)
}
results < - makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
results < - makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
makeCacheMatrix <- function(x) {
if (det(x) != 0){
inverse_matrix  <- inv(x)
}
else{
print("IS NOT SQUARE")
}
return (inverse_matrix)
}
makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3)
inv(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
library(matlib)
install.packages("matlib")
makeCacheMatrix <- function(x) {
if (det(x) != 0){
inverse_matrix  <- inv(x)
}
else{
print("Matrix not invertible and square")
}
return (inverse_matrix)
}
cacheSolve <- function(x, ...) {
x <- solve(x)
original_matrix  <- inv(x)
return(original_matrix)
}
makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
library(matlib)
makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
results$getinverse()
makeCacheMatrix <- function(x = matrix()) {
if (det(x) != 0){
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(i) m <<- solve(x)
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
else{
print("Matrix not invertible and square")
}
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
results$getinverse()
makeCacheMatrix <- function() {
if (det(x) != 0){
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(i) m <<- solve(x)
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
else{
print("Matrix not invertible and square")
}
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
makeCacheMatrix <- function(x) {
if (det(x) != 0){
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(i) m <<- solve(x)
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
else{
print("Matrix not invertible and square")
}
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
results$getinverse()
results
makeCacheMatrix <- function(x) {
if (det(x) != 0){
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(i) m <<- inv(x)
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
else{
print("Matrix not invertible and square")
}
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
results
makeCacheMatrix <- function(x = matrix()) {
if (det(x) != 0){
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(i) m <<- inv(x)
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
else{
print("Matrix not invertible and square")
}
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
resultsx x$get()
results$get()
results$x$getinverse(
results$getinverse(
results$getinverse()
results$getInverse()
ucscDb <- dbConnect(MySQL(), user='genome',
host='genome-mysql.cse.ucsc.edu')
library(RMySQL)
install.packages('RMySQL')
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user='genome',
host='genome-mysql.cse.ucsc.edu')
result <- dbGetQuery(ucscDb,'show database;');dbDisconnect(ucscDb)
dbDisconnect(ucscDb)
ucscDb <- dbConnect(MySQL(), user='genome',
host='genome-mysql.cse.ucsc.edu')
result <- dbGetQuery(ucscDb,'SHOW DATABASES')
dbDisconnect(ucscDb)
result
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")# htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
library(httr)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")# htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
if(!file.exists('./data')){dir.create('./data')}
fileUrl <- 'https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?acessType=DOWNLOAD'
download.file(fileUrl,destfile='./data/restaurants.csv', method = 'curl')
restData <- read.csv('./data/restaurants.csv')
head(restData, n=3)
tail(restData, n=3)
summary(restData)
quantile(restData$councilDistrict, na.rm = TRUE)
table(restData$zipCode %n% c('21212'))
library(dplyr)
options(width = 105)
chicago <- readRDS('chocago.rds')
chicago <- readRDS('chicago.rds')
chicago <- readRDS('chicago.RDS')
fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
QuizzData <- read.csv(fileUrl)
which(QuizzData)
head(QuizzData)
strsplit(QuizzData$WGTP)
strsplit(QuizzData ,split = QuizzData$WGTP)
strsplit(QuizzData ,split= 'wgtp')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
setwd("C:/Users/gabriel/Documents/Estudos/Coursera/Curso3/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset/")
getwd()
######## Description of the Project ##################################3
## You should create one R script called run_analysis.R that does the following.
#1. Merges the training and the test sets to create one data set.
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
#3. Uses descriptive activity names to name the activities in the data set
#4.  Appropriately labels the data set with descriptive variable names.
#5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#### Librarys used
library(readr)
##### Upload data
train <- read_lines('train/X_train.txt', locale = default_locale())
head(train)
test <- read_lines(test/X_test.txt, locale = default_locale())
head(test)
test <- read_lines('test/X_test.txt', locale = default_locale())
head(test)
trainX <- read.table(file='train/X_train.txt', sep="\t", quote="", comment.char="")
head(trainX)
trainX <- read.table(file='train/X_train.txt', sep=']', quote="", comment.char="")
head(trainX)
trainX <- read.table(file='train/X_train.txt', sep='\t', comment.char="")
head(trainX)
setwd("C:/Users/gabriel/Documents/Estudos/Coursera/Curso3/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset/")
getwd()
######## Description of the Project ##################################3
## You should create one R script called run_analysis.R that does the following.
#1. Merges the training and the test sets to create one data set.
#2. Extracts only the measurements on the mean and standard deviation for each measurement.
#3. Uses descriptive activity names to name the activities in the data set
#4.  Appropriately labels the data set with descriptive variable names.
#5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
#### Librarys used
library(readr)
##### Upload data from the project
#Train Data
X_train <- read.table("train/X_train.txt") # set.
y_train <- read.table("train/y_train.txt") # labels.
subject_train <- read.table(file.path("train","subject_train.txt")) #Each row identifies the subject who performed the activity for each window sample. Its range is from 1 to 30.
# Test Data
X_test  <- read.table("test/X_test.txt") # set.
y_test  <- read.table("test/y_test.txt") # labels.
subject_test  <- read.table(file.path("test","subject_test.txt")) #Each row identifies the subject who performed the activity for each window sample. Its range is from 1 to 30.
#Link the class labels with their activity name
activity_labels <- read.table("activity_labels.txt")
#List of all features
features<- read.table("features.txt")
merged_train <- cbind(subject_train, y_train, X_train)
merged_tes <- cbind(subject_test,  y_test,  X_test)
head(merged_train)
head(merged_tes)
